// <auto-generated />
using System;
using Intalk.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Intalk.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20210509164604_SeedUsersServers")]
    partial class SeedUsersServers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Intalk.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "migrationuserId0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c608676f-86a6-49ff-867d-a99b495a3195",
                            Email = "test0@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST0@TEST.COM",
                            NormalizedUserName = "TESTUSER0",
                            PasswordHash = "AQAAAAEAACcQAAAAEGoPyayiYwMQAzQCRGY8r7pFNuiKd++DZ2hRDwPbSAgnahuCEmrX0QRNsjF9xa9SHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b34bb54-0232-46b4-872e-b12ce8d58934",
                            TwoFactorEnabled = false,
                            UserName = "TestUser0"
                        },
                        new
                        {
                            Id = "migrationuserId1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f8cd75d-0921-4dc9-8e23-6b9278cf6a1b",
                            Email = "test1@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST1@TEST.COM",
                            NormalizedUserName = "TESTUSER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAuBWZTLWUlbhm5CC0ZqXewrRWXssS34dl3rGzy0bzyeYG8Ro93A806S3kELnWnH4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a23f4101-b5ab-4847-8ae7-df0fd12d8416",
                            TwoFactorEnabled = false,
                            UserName = "TestUser1"
                        },
                        new
                        {
                            Id = "migrationuserId2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8dd597a4-075d-4f59-8164-fed735cef7d1",
                            Email = "test2@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST2@TEST.COM",
                            NormalizedUserName = "TESTUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEF1P2xZc7lYlSIT9Z7VA90qBBYDvJTq3eHH1MyllFPrfPIzLuyONnhiyXpgSQ+fIbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "755f7247-8381-4e3b-8709-4f4cdddde430",
                            TwoFactorEnabled = false,
                            UserName = "TestUser2"
                        },
                        new
                        {
                            Id = "migrationuserId3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cefbb381-e2ad-4973-9c3a-8c863bab5886",
                            Email = "test3@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST3@TEST.COM",
                            NormalizedUserName = "TESTUSER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEMRDAB0ptoUWBLdV1bJn/tAho+R2gUbtAPOI3B6AjAPAHs8bFNDiV9h5w9SLLnaS9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f82718b-e767-4d00-8394-ed7491fa2e72",
                            TwoFactorEnabled = false,
                            UserName = "TestUser3"
                        });
                });

            modelBuilder.Entity("Intalk.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRevorked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Intalk.Models.Server", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Server");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            Title = "Server#0"
                        },
                        new
                        {
                            Id = -2L,
                            Title = "Server#1"
                        },
                        new
                        {
                            Id = -3L,
                            Title = "Server#2"
                        },
                        new
                        {
                            Id = -4L,
                            Title = "Server#3"
                        });
                });

            modelBuilder.Entity("Intalk.Models.UserServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<long>("ServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserServers");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            Role = 1,
                            ServerId = -1L,
                            UserId = "migrationuserId0"
                        },
                        new
                        {
                            Id = -2L,
                            Role = 0,
                            ServerId = -1L,
                            UserId = "migrationuserId1"
                        },
                        new
                        {
                            Id = -3L,
                            Role = 0,
                            ServerId = -1L,
                            UserId = "migrationuserId2"
                        },
                        new
                        {
                            Id = -4L,
                            Role = 0,
                            ServerId = -1L,
                            UserId = "migrationuserId3"
                        },
                        new
                        {
                            Id = -5L,
                            Role = 0,
                            ServerId = -2L,
                            UserId = "migrationuserId0"
                        },
                        new
                        {
                            Id = -6L,
                            Role = 1,
                            ServerId = -2L,
                            UserId = "migrationuserId1"
                        },
                        new
                        {
                            Id = -7L,
                            Role = 0,
                            ServerId = -2L,
                            UserId = "migrationuserId2"
                        },
                        new
                        {
                            Id = -8L,
                            Role = 0,
                            ServerId = -2L,
                            UserId = "migrationuserId3"
                        },
                        new
                        {
                            Id = -9L,
                            Role = 0,
                            ServerId = -3L,
                            UserId = "migrationuserId0"
                        },
                        new
                        {
                            Id = -10L,
                            Role = 0,
                            ServerId = -3L,
                            UserId = "migrationuserId1"
                        },
                        new
                        {
                            Id = -11L,
                            Role = 1,
                            ServerId = -3L,
                            UserId = "migrationuserId2"
                        },
                        new
                        {
                            Id = -12L,
                            Role = 0,
                            ServerId = -3L,
                            UserId = "migrationuserId3"
                        },
                        new
                        {
                            Id = -13L,
                            Role = 0,
                            ServerId = -4L,
                            UserId = "migrationuserId0"
                        },
                        new
                        {
                            Id = -14L,
                            Role = 0,
                            ServerId = -4L,
                            UserId = "migrationuserId1"
                        },
                        new
                        {
                            Id = -15L,
                            Role = 0,
                            ServerId = -4L,
                            UserId = "migrationuserId2"
                        },
                        new
                        {
                            Id = -16L,
                            Role = 1,
                            ServerId = -4L,
                            UserId = "migrationuserId3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Intalk.Models.RefreshToken", b =>
                {
                    b.HasOne("Intalk.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Intalk.Models.UserServer", b =>
                {
                    b.HasOne("Intalk.Models.Server", "Server")
                        .WithMany("UserServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intalk.Models.ApplicationUser", "User")
                        .WithMany("UserServers")
                        .HasForeignKey("UserId");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Intalk.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Intalk.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intalk.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Intalk.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intalk.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserServers");
                });

            modelBuilder.Entity("Intalk.Models.Server", b =>
                {
                    b.Navigation("UserServers");
                });
#pragma warning restore 612, 618
        }
    }
}
