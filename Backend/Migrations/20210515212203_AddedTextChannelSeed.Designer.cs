// <auto-generated />
using System;
using Intalk.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Intalk.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20210515212203_AddedTextChannelSeed")]
    partial class AddedTextChannelSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Intalk.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "migrationuserId0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "517c9546-837b-47ce-b536-1d6f65d59b03",
                            Email = "test0@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST0@TEST.COM",
                            NormalizedUserName = "TESTUSER0",
                            PasswordHash = "AQAAAAEAACcQAAAAEPMVeI2Q9VBo4fBturgQehmY9yEHi7PAa/rt+DJKyej92IZLUUqy2JiY7tKs6y/gag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f08f503-7156-4f07-9cd9-37ac8ed4bba2",
                            TwoFactorEnabled = false,
                            UserName = "TestUser0"
                        },
                        new
                        {
                            Id = "migrationuserId1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29d69510-115d-4c20-8e8b-626201d4228c",
                            Email = "test1@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST1@TEST.COM",
                            NormalizedUserName = "TESTUSER1",
                            PasswordHash = "AQAAAAEAACcQAAAAED7rHmu3Xt0GdZ7JlrvMz8kOraNv3gYmsEHTrCAQ0BcQfjjeIXuhuajJlCVFXuwYzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3aea965f-88a9-457f-b4bd-8810fcbe3ddc",
                            TwoFactorEnabled = false,
                            UserName = "TestUser1"
                        },
                        new
                        {
                            Id = "migrationuserId2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d78600e-a8ee-4316-b34d-00500374670a",
                            Email = "test2@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST2@TEST.COM",
                            NormalizedUserName = "TESTUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAED16qmjfR2mbgbS6Kct6LZXNl9zvQQ1HwrcbHfcvdmFiUzIiCs5l1qWC6oB6vtrykQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2768f44-8a46-4379-900b-77bf703ca28f",
                            TwoFactorEnabled = false,
                            UserName = "TestUser2"
                        },
                        new
                        {
                            Id = "migrationuserId3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b106124-7c7c-4350-ba27-0570a31f318a",
                            Email = "test3@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST3@TEST.COM",
                            NormalizedUserName = "TESTUSER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEACfJr2Wcm38cPr1mAJ1zhoHXw58/8k5B+IGMe5SjI/nQCqlpq6XO6Xp7jt4TYnqsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2c32030-f730-402a-a5de-309bd43438b5",
                            TwoFactorEnabled = false,
                            UserName = "TestUser3"
                        });
                });

            modelBuilder.Entity("Intalk.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRevorked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Intalk.Models.Server", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.ToTable("Server");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            Title = "Server#0"
                        },
                        new
                        {
                            Id = -2L,
                            Title = "Server#1"
                        },
                        new
                        {
                            Id = -3L,
                            Title = "Server#2"
                        },
                        new
                        {
                            Id = -4L,
                            Title = "Server#3"
                        });
                });

            modelBuilder.Entity("Intalk.Models.TextChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("TextChannels");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ServerId = -1L,
                            Title = "Text Channel #0"
                        },
                        new
                        {
                            Id = -2,
                            ServerId = -1L,
                            Title = "Text Channel #1"
                        },
                        new
                        {
                            Id = -3,
                            ServerId = -1L,
                            Title = "Text Channel #2"
                        },
                        new
                        {
                            Id = -4,
                            ServerId = -1L,
                            Title = "Text Channel #3"
                        },
                        new
                        {
                            Id = -5,
                            ServerId = -2L,
                            Title = "Text Channel #4"
                        },
                        new
                        {
                            Id = -6,
                            ServerId = -2L,
                            Title = "Text Channel #5"
                        },
                        new
                        {
                            Id = -7,
                            ServerId = -2L,
                            Title = "Text Channel #6"
                        },
                        new
                        {
                            Id = -8,
                            ServerId = -2L,
                            Title = "Text Channel #7"
                        },
                        new
                        {
                            Id = -9,
                            ServerId = -3L,
                            Title = "Text Channel #8"
                        },
                        new
                        {
                            Id = -10,
                            ServerId = -3L,
                            Title = "Text Channel #9"
                        },
                        new
                        {
                            Id = -11,
                            ServerId = -3L,
                            Title = "Text Channel #10"
                        },
                        new
                        {
                            Id = -12,
                            ServerId = -3L,
                            Title = "Text Channel #11"
                        },
                        new
                        {
                            Id = -13,
                            ServerId = -4L,
                            Title = "Text Channel #12"
                        },
                        new
                        {
                            Id = -14,
                            ServerId = -4L,
                            Title = "Text Channel #13"
                        },
                        new
                        {
                            Id = -15,
                            ServerId = -4L,
                            Title = "Text Channel #14"
                        },
                        new
                        {
                            Id = -16,
                            ServerId = -4L,
                            Title = "Text Channel #15"
                        });
                });

            modelBuilder.Entity("Intalk.Models.UserServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<long>("ServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserServers");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            Role = 1,
                            ServerId = -1L,
                            UserId = "migrationuserId0"
                        },
                        new
                        {
                            Id = -2L,
                            Role = 0,
                            ServerId = -1L,
                            UserId = "migrationuserId1"
                        },
                        new
                        {
                            Id = -3L,
                            Role = 0,
                            ServerId = -1L,
                            UserId = "migrationuserId2"
                        },
                        new
                        {
                            Id = -4L,
                            Role = 0,
                            ServerId = -1L,
                            UserId = "migrationuserId3"
                        },
                        new
                        {
                            Id = -5L,
                            Role = 0,
                            ServerId = -2L,
                            UserId = "migrationuserId0"
                        },
                        new
                        {
                            Id = -6L,
                            Role = 1,
                            ServerId = -2L,
                            UserId = "migrationuserId1"
                        },
                        new
                        {
                            Id = -7L,
                            Role = 0,
                            ServerId = -2L,
                            UserId = "migrationuserId2"
                        },
                        new
                        {
                            Id = -8L,
                            Role = 0,
                            ServerId = -2L,
                            UserId = "migrationuserId3"
                        },
                        new
                        {
                            Id = -9L,
                            Role = 0,
                            ServerId = -3L,
                            UserId = "migrationuserId0"
                        },
                        new
                        {
                            Id = -10L,
                            Role = 0,
                            ServerId = -3L,
                            UserId = "migrationuserId1"
                        },
                        new
                        {
                            Id = -11L,
                            Role = 1,
                            ServerId = -3L,
                            UserId = "migrationuserId2"
                        },
                        new
                        {
                            Id = -12L,
                            Role = 0,
                            ServerId = -3L,
                            UserId = "migrationuserId3"
                        },
                        new
                        {
                            Id = -13L,
                            Role = 0,
                            ServerId = -4L,
                            UserId = "migrationuserId0"
                        },
                        new
                        {
                            Id = -14L,
                            Role = 0,
                            ServerId = -4L,
                            UserId = "migrationuserId1"
                        },
                        new
                        {
                            Id = -15L,
                            Role = 0,
                            ServerId = -4L,
                            UserId = "migrationuserId2"
                        },
                        new
                        {
                            Id = -16L,
                            Role = 1,
                            ServerId = -4L,
                            UserId = "migrationuserId3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Intalk.Models.RefreshToken", b =>
                {
                    b.HasOne("Intalk.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Intalk.Models.TextChannel", b =>
                {
                    b.HasOne("Intalk.Models.Server", "Server")
                        .WithMany("TextChannels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Intalk.Models.UserServer", b =>
                {
                    b.HasOne("Intalk.Models.Server", "Server")
                        .WithMany("UserServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intalk.Models.ApplicationUser", "User")
                        .WithMany("UserServers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Intalk.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Intalk.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intalk.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Intalk.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intalk.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserServers");
                });

            modelBuilder.Entity("Intalk.Models.Server", b =>
                {
                    b.Navigation("TextChannels");

                    b.Navigation("UserServers");
                });
#pragma warning restore 612, 618
        }
    }
}
